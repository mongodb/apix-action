---
name: Create Jira
on:
  push:
    branches:
      - main
  pull_request:
jobs:
  create-jira-build:
    runs-on: ubuntu-latest
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@v1
        with:
          config: ${{ vars.PERMISSIONS_CONFIG }}
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
            node-version-file: create-jira/package.json
      - name: install dependencies
        working-directory: ./create-jira
        run: |
          npm ci
      - name: build
        working-directory: ./create-jira
        run: |
          npm run build
      - name: Check for uncommitted files
        run: |
          export FILES=
          FILES=$(git ls-files -o -m --directory --exclude-standard --no-empty-directory)
          export LINES=
          LINES=$(echo "$FILES" | awk 'NF' | wc -l)
          if [ "$LINES" -ne 0 ]; then
            echo "Detected files that need to be committed:"
            echo "${FILES//^/ }"
            echo ""
            echo "Try running: make gen-docs"
            exit 1
          fi
  create-jira-unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@v1
        with:
          config: ${{ vars.PERMISSIONS_CONFIG }}
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
            node-version-file: create-jira/package.json
      - name: install dependencies
        working-directory: ./create-jira
        run: |
          npm ci
      - name: Run tests
        working-directory: ./create-jira
        run: |
          npm run test
  create-jira-test:
    runs-on: ubuntu-latest
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@v1
        with:
          config: ${{ vars.PERMISSIONS_CONFIG }}
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Write inline Nginx config
        run: |
          cat <<EOF > nginx.conf
          events {}

          http {
              server {
                  listen 80;

                  location = /rest/api/2/issue {
                      if ($request_method = POST) {
                          default_type application/json;
                          return 200 '{"key": "MOCK-123", "id": "10001", "self": "http://localhost:8080/rest/api/2/issue/10001"}';
                      }

                      return 405;  # Method Not Allowed for non-POST
                  }

                  location /ping {
                      default_type plain/text;
                      return 200 'PONG';
                  }
              }
          }
          EOF

      - name: Start Nginx with Docker
        run: |
          docker run -d --name mock-nginx \
            -v ${{ github.workspace }}/nginx.conf:/etc/nginx/nginx.conf:ro \
            -p 55000:80 nginx:alpine

      - name: Wait for Nginx to be ready (via /ping)
        run: |
          for i in {1..50}; do
            if curl -s http://localhost:55000/ping > /dev/null; then
              echo "âœ… Nginx is ready!"
              exit 0
            fi
            echo "Waiting for Nginx..."
            docker logs mock-nginx
            sleep 1
          done
          echo "Nginx is not reacheable"
          exit 1

      - uses: ./create-jira/
        with:
          token: test
          project-key: PROJECT
          summary: My Jira Issue
          description: My Jira Issue Description
          api-base: http://localhost:55000
          issuetype: TEST
          assignee: USER
          labels: LABEL1,LABEL2
          components: COMPONENT1,COMPONENT2
          extra-data: |
            {
              "customfield_10000": "value"
            }
